using System;
using System.Collections.Generic;
using System.Linq;
using TMD.Interfaces.IRepository;
using TMD.Interfaces.IServices;
using TMD.Models.DomainModels;
<<<<<<< HEAD
using TMD.Models.RequestModels;
using TMD.Models.ResponseModels;
=======
using TMD.Models.ModelMapers;
using TMD.Models.WebModels;
>>>>>>> 7765c9fdfa789ecf29f096f4142ded9283af7695

namespace TMD.Implementation.Services
{
    public class OrdersService : IOrdersService
    {
        private readonly IOrdersRepository ordersRepository;
<<<<<<< HEAD
        private readonly IReturnedItemRepository returnedItemRepository;


        public OrdersService(IOrdersRepository ordersRepository, IReturnedItemRepository returnedItemRepository)
        {
            this.ordersRepository = ordersRepository;
            this.returnedItemRepository = returnedItemRepository;
=======
        private readonly IOrderItemsRepository orderItemsRepository;


        public OrdersService(IOrdersRepository ordersRepository,IOrderItemsRepository orderItemsRepository)
        {
            this.ordersRepository = ordersRepository;
            this.orderItemsRepository = orderItemsRepository;
>>>>>>> 7765c9fdfa789ecf29f096f4142ded9283af7695
        }


        public Order GetOrders(long orderId)
        {
            return ordersRepository.Find(orderId);
        }

        public IEnumerable<Order> GetAllOrders()
        {
            throw new System.NotImplementedException();
        }


        public long AddService(Order order)
        {
            try
            {
                ordersRepository.Add(order);
                ordersRepository.SaveChanges();
                return order.OrderId;

            }
            catch (Exception e)
            {

                throw e;
            }
        }

        public bool UpdateService(Order order)
        {
            try
            {
                ordersRepository.Update(order);
                
                ordersRepository.SaveChanges();
                return true;
            }
            catch (Exception e)
            {

                throw e;
                
            }
        }

        public bool DeleteOrder(long orderId)
        {
            var order = ordersRepository.Find(orderId);
            if (order != null)
            {
                order.IsDeleted = true;
                ordersRepository.Update(order);
                ordersRepository.SaveChanges();
                return true;
            }
            return false;
        }

        public ReturnedOrderItemModel GetReturnedOrderItem(long itemId, long orderId)
        {
            var orderItem = orderItemsRepository.GetItemByProductVariationId(itemId, orderId);
            var returnedItem = orderItemsRepository.GetItemByProductVariationId(itemId, orderId);
            if (returnedItem != null)
            {
            }
            return null;
        }


        public Models.ResponseModels.OrderSearchResponse GetOrdersSearchResponse(Models.RequestModels.OrderSearchRequest searchRequest)
        {
            return ordersRepository.GetOrdersSearchResponse(searchRequest);
        }

        public ReturnItemsSearchResponse GetReturnItemsSearchResponse(ReturnItemSearchRequest searchRequest)
        {
            return returnedItemRepository.GetReturnItemsSearchResponse(searchRequest);
        }
        
    }
}
